import pygame

pygame.init()
pygame.font.init()

width, height = 1920, 1080

gd = pygame.display.set_mode((width, height))
clock = pygame.time.Clock()
pygame.display.set_caption("Clicker game")

WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLACK = (0, 0, 0)

# UI variables
buttonX, buttonY = 400, 200
font = pygame.font.SysFont('Comic Sans MS', 60)

upgradeButtons = []

# Score variables
points = 0
upgrade1_level = 0  # Houdt bij hoe vaak Upgrade 1 is gekocht
upgrade1_timer = 0  # Timer voor automatische punten
upgrade2_level = 1  # Houdt bij hoeveel extra punten per klik (start op 1)
auto_click_interval = 1000  # Startwaarde voor auto-click interval in ms

def draw_text(input, position):
    text_surface = font.render(input, False, BLACK)
    text_width, text_height = text_surface.get_size()
    text_pos = (position[0] - text_width / 2, position[1] - text_height / 2)
    gd.blit(text_surface, text_pos)

def draw_points():
    draw_text("Points: " + str(points), (width / 2, 50))

class Button:
    def __init__(self, pos, size, buttonText, is_upgrade=False):
        self.pos = pos
        self.size = size
        self.buttonText = buttonText
        self.is_upgrade = is_upgrade  # Geeft aan of het een upgrade-knop is

    def draw(self):
        pygame.draw.rect(gd, GREEN, pygame.Rect(self.pos[0] - self.size[0] / 2, self.pos[1] - self.size[1] / 2, self.size[0], self.size[1]))
        draw_text(self.buttonText, self.pos)

    def checkClick(self):
        global points, upgrade1_level, upgrade2_level, auto_click_interval

        mousePos = pygame.mouse.get_pos()
        if (self.pos[0] - self.size[0] / 2 < mousePos[0] < self.pos[0] + self.size[0] / 2 and
            self.pos[1] - self.size[1] / 2 < mousePos[1] < self.pos[1] + self.size[1] / 2):

            if self.is_upgrade:
                if self.buttonText == "Auto-click (500)":  # Upgrade 1
                    if points >= 500:
                        points -= 500
                        upgrade1_level += 1  # Upgrade level stijgt
                        print(f"Auto-click gekocht! Niveau: {upgrade1_level}. Nu krijg je {upgrade1_level} punten per seconde.")

                elif self.buttonText == "Upgrade click (1000)":  # Upgrade 2
                    if points >= 1000:
                        points -= 1000
                        upgrade2_level += 1  # Extra punt per klik stijgt
                        print(f"Upgrade 2 gekocht! Nu krijg je {upgrade2_level} punten per klik.")

                elif self.buttonText == "Faster (2000)":  # Upgrade 3 - Versnelt auto-click timer
                    if points >= 2000:
                        points -= 2000
                        auto_click_interval *= 0.9  # Timer wordt 10% sneller
                        print(f"Upgrade 3 gekocht! Auto-click interval is nu {auto_click_interval:.0f} ms.")

            else:
                points += upgrade2_level  # Extra punten per klik
                print(f"Punten: {points}")

button = Button((width / 2, height / 2), (buttonX, buttonY), 'Click!')
upgradeButtons.append(Button((1600, 340), (600, 120), 'Auto-click (500)', is_upgrade=True))
upgradeButtons.append(Button((1600, 540), (600, 120), 'Upgrade click (1000)', is_upgrade=True))
upgradeButtons.append(Button((1600, 740), (600, 120), 'Faster (2000)', is_upgrade=True))

running = True
while running:
    gd.fill(WHITE)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            button.checkClick()
            for upgrade in upgradeButtons:
                upgrade.checkClick()

    # **Automatische punten toevoegen afhankelijk van upgrade1_level**
    if upgrade1_level > 0:
        if pygame.time.get_ticks() - upgrade1_timer >= auto_click_interval:  # Gebruikt variabele interval
            points += upgrade1_level  # Extra punten per upgrade-niveau
            upgrade1_timer = pygame.time.get_ticks()  # Reset timer

    draw_points()
    button.draw()

    for upgrade in upgradeButtons:
        upgrade.draw()

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
